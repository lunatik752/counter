{"version":3,"sources":["Navbar/Navbar.module.css","Counter2/SettingsBlock/InputsAreaSettingsBlock/InputForSettings/InputForSettings.module.css","Counter1/SettingsBlock/InputsAreaSettingsBlock/InputForSettings/InputForSettings.module.css","Counter1/OutputBlock/OutputValue/OutputValue.module.css","Counter1/Counter1.module.css","Counter2/OutputBlock/OutputValue/OutputValue.module.css","Counter2/OutputBlock/OutputBlock.module.css","Counter2/OutputBlock/ButtonsAreaOutputBlock/ButtonsAreaOutputBlock.module.css","Button/Button.module.css","Counter2/SettingsBlock/SettingsBlock.module.css","Counter2/SettingsBlock/ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock.module.css","Counter2/SettingsBlock/InputsAreaSettingsBlock/InputsAreaSettingsBlock.module.css","Counter1/SettingsBlock/SettingsBlock.module.css","Counter1/SettingsBlock/ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock.module.css","Counter1/SettingsBlock/InputsAreaSettingsBlock/InputsAreaSettingsBlock.module.css","Counter1/OutputBlock/OutputBlock.module.css","Counter1/OutputBlock/ButtonsAreaOutputBlock/ButtonsAreaOutputBlock.module.css","Navbar/Navbar.jsx","Counter2/OutputBlock/OutputValue/OutputValue.jsx","Button/Button.jsx","Counter2/OutputBlock/ButtonsAreaOutputBlock/ButtonsAreaOutputBlock.jsx","Counter2/OutputBlock/OutputBlock.jsx","Counter2/SettingsBlock/ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock.jsx","Counter2/SettingsBlock/InputsAreaSettingsBlock/InputForSettings/InputForSettings.jsx","Counter2/SettingsBlock/InputsAreaSettingsBlock/InputsAreaSettingsBlock.jsx","Counter2/SettingsBlock/SettingsBlock.jsx","Counter2/Counter2.jsx","Counter1/SettingsBlock/ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock.jsx","Counter1/SettingsBlock/InputsAreaSettingsBlock/InputForSettings/InputForSettings.jsx","Counter1/SettingsBlock/InputsAreaSettingsBlock/InputsAreaSettingsBlock.jsx","Counter1/SettingsBlock/SettingsBlock.jsx","Counter1/OutputBlock/ButtonsAreaOutputBlock/ButtonsAreaOutputBlock.jsx","Counter1/OutputBlock/OutputValue/OutputValue.jsx","Counter1/OutputBlock/OutputBlock.jsx","Counter1/Counter1.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","style","navbar","item","to","activeClassName","active","OutputValue","props","counterClass","state","currentValue","maxValue","outputValueMax","outputValue","outputValueWrapper","Button","button","onClick","disabled","title","ButtonsAreaOutputBlock","buttonsArea","changeCounterValue","disabledCountButton","reset","showSettingsBlock","OutputBlock","outputBlock","ButtonsAreaSettingsBlock","onButtonSetClick","InputForSettings","classNameInput","inputErrorClass","input","error","inputForSettings","inputTitle","type","onChange","e","value","Number","currentTarget","inputValue","InputsAreaSettingsBlock","inputsArea","updateNewMaxValue","inputMaxValueError","startValue","updateNewStartValue","inputStartValueError","SettingsBlock","settingsBlock","disabledSetButton","Counter2","componentDidMount","restoreState","isHidden","saveState","stateAsString","JSON","stringify","localStorage","setItem","getItem","parse","setState","newCurrentValue","newValue","render","counterWrapper","React","Component","classInput","disabledResetButton","outputValueText","outputValueTextError","Counter1","App","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,OAAS,yB,gBCAvFD,EAAOC,QAAU,CAAC,iBAAmB,2CAA2C,WAAa,qCAAqC,MAAQ,gCAAgC,MAAQ,kC,gBCAlLD,EAAOC,QAAU,CAAC,iBAAmB,2CAA2C,WAAa,qCAAqC,MAAQ,gCAAgC,MAAQ,kC,gBCAlLD,EAAOC,QAAU,CAAC,mBAAqB,wCAAwC,YAAc,iCAAiC,eAAiB,oCAAoC,gBAAkB,qCAAqC,qBAAuB,4C,kBCAjQD,EAAOC,QAAU,CAAC,eAAiB,mC,kBCAnCD,EAAOC,QAAU,CAAC,mBAAqB,wCAAwC,YAAc,iCAAiC,eAAiB,sC,wBCA/ID,EAAOC,QAAU,CAAC,YAAc,mC,gBCAhCD,EAAOC,QAAU,CAAC,YAAc,8C,gBCAhCD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,cAAgB,uC,gBCAlCD,EAAOC,QAAU,CAAC,YAAc,gD,gBCAhCD,EAAOC,QAAU,CAAC,WAAa,8C,gBCA/BD,EAAOC,QAAU,CAAC,cAAgB,uC,gBCAlCD,EAAOC,QAAU,CAAC,YAAc,gD,gBCAhCD,EAAOC,QAAU,CAAC,WAAa,8C,gBCA/BD,EAAOC,QAAU,CAAC,YAAc,mC,gBCAhCD,EAAOC,QAAU,CAAC,YAAc,8C,4LCgBjBC,MAbf,WACE,OACE,yBAAKC,UAAWC,IAAMC,QACpB,yBAAKF,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASC,GAAG,YAAYC,gBAAiBJ,IAAMK,QAA/C,cAEF,yBAAKN,UAAWC,IAAME,MACpB,kBAAC,IAAD,CAASC,GAAG,YAAYC,gBAAiBJ,IAAMK,QAA/C,gB,kFCKOC,EAZK,SAACC,GAEjB,IAAIC,EAAeD,EAAME,MAAMC,eAAiBH,EAAME,MAAME,SAAWX,IAAMY,eAAiBZ,IAAMa,YAEpG,OACI,yBAAKd,UAAWC,IAAMc,oBAClB,0BAAMf,UAAWS,GAAeD,EAAME,MAAMC,gB,kCCUzCK,EAhBA,SAACR,GAMZ,OACI,6BACI,4BAAQR,UAAWC,IAAMgB,OACrBC,QAPQ,WACjBV,EAAMU,WAOGC,SAAUX,EAAMW,UAClBX,EAAMY,SCWLC,EArBgB,SAACb,GAG5B,OACI,yBAAKR,UAAWC,IAAMqB,aAClB,kBAAC,EAAD,CAAQF,MAAO,MACPF,QAASV,EAAMe,mBACfJ,SAAUX,EAAME,MAAMc,sBAE9B,kBAAC,EAAD,CAAQJ,MAAO,QACPF,QAASV,EAAMiB,QAGvB,kBAAC,EAAD,CAAQL,MAAO,MACXF,QAASV,EAAMkB,sBCEhBC,EAdK,SAACnB,GACjB,OACI,yBAAKR,UAAWC,IAAM2B,aAClB,kBAAC,EAAD,CAAaF,kBAAmBlB,EAAMkB,kBACzBhB,MAAOF,EAAME,QAC1B,kBAAC,EAAD,CAAwBgB,kBAAmBlB,EAAMkB,kBACzBD,MAAOjB,EAAMiB,MACbF,mBAAoBf,EAAMe,mBAC1Bb,MAAOF,EAAME,U,kCCClCmB,EAXkB,SAACrB,GAC9B,OACI,yBAAKR,UAAWC,IAAMqB,aAClB,kBAAC,EAAD,CAAQF,MAAO,MACPF,QAASV,EAAMsB,iBACfX,SAAUX,EAAMW,a,iCCUrBY,EAhBU,SAACvB,GACtB,IAIIwB,EAAiBxB,EAAMyB,gBAAkBhC,IAAMiC,MAAQ,IAAMjC,IAAMkC,MAAQlC,IAAMiC,MAErF,OACI,yBAAKlC,UAAWC,IAAMmC,kBAClB,0BAAMpC,UAAWC,IAAMoC,YAAa7B,EAAMY,OAC1C,2BAAOpB,UAAWgC,EAAgBM,KAAK,SAASC,SATpC,SAACC,GACjB,IAAIC,EAAQC,OAAOF,EAAEG,cAAcF,OACnCjC,EAAM+B,SAASE,IAO8DA,MAAOjC,EAAMoC,eCYnFC,EArBiB,SAACrC,GAE7B,OACI,yBAAKR,UAAWC,IAAM6C,YAClB,kBAAC,EAAD,CACI1B,MAAO,YACPwB,WAAYpC,EAAME,MAAME,SACV2B,SAAU/B,EAAMuC,kBAChBd,gBAAiBzB,EAAME,MAAMsC,qBAE/C,kBAAC,EAAD,CACI5B,MAAO,cACPwB,WAAYpC,EAAME,MAAMuC,WACVV,SAAU/B,EAAM0C,oBAChBjB,gBAAiBzB,EAAME,MAAMyC,yBCK5CC,EAlBO,SAAC5C,GAGnB,OACI,yBAAKR,UAAWC,IAAMoD,eAClB,kBAAC,EAAD,CACI3C,MAAOF,EAAME,MACbqC,kBAAmBvC,EAAMuC,kBACzBG,oBAAqB1C,EAAM0C,sBAE/B,kBAAC,EAAD,CACIpB,iBAAkBtB,EAAMsB,iBACxBX,SAAUX,EAAME,MAAM4C,sBCqHvBC,E,4MA/HXC,kBAAoB,WAChB,EAAKC,gB,EAGT/C,MAAQ,CACJC,aAAc,EACdsC,WAAY,EACZrC,SAAU,EACV0C,mBAAmB,EACnB9B,qBAAqB,EACrBwB,oBAAoB,EACpBG,sBAAsB,EACtBO,UAAU,G,EAGdC,UAAY,WACR,IAAIC,EAAgBC,KAAKC,UAAU,EAAKpD,OACxCqD,aAAaC,QAAQ,wBAAyBJ,I,EAGlDH,aAAe,WACX,IAAI/C,EAAQ,EAAKA,MACbkD,EAAgBG,aAAaE,QAAQ,yBACrCL,IACAlD,EAAQmD,KAAKK,MAAMN,IAEvB,EAAKO,SAASzD,I,EAIlBe,MAAQ,WACJ,EAAK0C,SAAS,CACNxD,aAAc,EAAKD,MAAMuC,WACzBzB,qBAAqB,K,EAKjCD,mBAAqB,WACjB,IAAI6C,EAAkB,EAAK1D,MAAMC,aAAe,EAChD,EAAKwD,SAAS,CACVxD,aAAcyD,IAEd,EAAK1D,MAAMC,eAAiB,EAAKD,MAAME,SAAW,GAClD,EAAKuD,SAAS,CACV3C,qBAAqB,K,EAKjC0B,oBAAsB,SAACmB,GACnB,EAAKF,SAAS,CACVlB,WAAYoB,EACZf,mBAAmB,EACnBH,sBAAsB,EACtBH,oBAAoB,IAEpBqB,EAAW,EACX,EAAKF,SAAS,CACVb,mBAAmB,EACnBH,sBAAsB,IAEnBkB,GAAY,EAAK3D,MAAME,UAC9B,EAAKuD,SAAS,CACVhB,sBAAsB,EACtBH,oBAAoB,EACpBM,mBAAmB,K,EAK/BP,kBAAoB,SAACsB,GACjB,EAAKF,SAAS,CACVvD,SAAUyD,EACVf,mBAAmB,EACnBN,oBAAoB,EACpBG,sBAAsB,IAEtBkB,EAAW,EACX,EAAKF,SAAS,CACVb,mBAAmB,EACnBN,oBAAoB,IAEjBqB,GAAY,EAAK3D,MAAMuC,YAC9B,EAAKkB,SAAS,CACVhB,sBAAsB,EACtBH,oBAAoB,EACpBM,mBAAmB,K,EAK/BxB,iBAAmB,WACf,EAAKqC,SAAS,CACVT,UAAU,EACV/C,aAAc,EAAKD,MAAMuC,WACzBzB,qBAAqB,GACtB,EAAKmC,Y,EAGZjC,kBAAoB,WAChB,EAAKyC,SAAS,CACVT,UAAU,GACX,EAAKC,Y,EAIZW,OAAS,WAEL,OACI,yBAAKtE,UAAWC,IAAMsE,iBAChB,EAAK7D,MAAMgD,UAAY,kBAAC,EAAD,CAAahD,MAAO,EAAKA,MACZgB,kBAAmB,EAAKA,kBACxBD,MAAO,EAAKA,MACZF,mBAAoB,EAAKA,qBAG9D,EAAKb,MAAMgD,UAAY,kBAAC,EAAD,CAAehD,MAAO,EAAKA,MACZoB,iBAAkB,EAAKA,iBACvBoB,oBAAqB,EAAKA,oBAC1BH,kBAAmB,EAAKA,sB,YA1HxDyB,IAAMC,W,kCCUd5C,EAXkB,SAACrB,GAC9B,OACI,yBAAKR,UAAWC,IAAMqB,aAClB,kBAAC,EAAD,CAAQF,MAAO,MACPF,QAASV,EAAMsB,iBACfX,SAAUX,EAAMW,a,kCCUrBY,EAhBU,SAACvB,GACtB,IAIIwB,EAAiBxB,EAAMyB,gBAAkBhC,IAAMiC,MAAQ,IAAMjC,IAAMkC,MAAQlC,IAAMiC,MAErF,OACI,yBAAKlC,UAAWC,IAAMmC,kBAClB,0BAAMpC,UAAWC,IAAMoC,YAAa7B,EAAMY,OAC1C,2BAAOpB,UAAWgC,EAAgBM,KAAK,SAASC,SATpC,SAACC,GACjB,IAAIC,EAAQC,OAAOF,EAAEG,cAAcF,OACnCjC,EAAM+B,SAASE,IAO8DA,MAAOjC,EAAMoC,eCQnFC,EAjBiB,SAACrC,GAE7B,OACI,yBAAKR,UAAWC,IAAM6C,YAClB,kBAAC,EAAD,CAAkB1B,MAAO,YAAawB,WAAYpC,EAAME,MAAME,SAC5C2B,SAAU/B,EAAMuC,kBAChBd,gBAAiBzB,EAAME,MAAMsC,qBAE/C,kBAAC,EAAD,CAAkB5B,MAAO,cAAewB,WAAYpC,EAAME,MAAMuC,WAC9CV,SAAU/B,EAAM0C,oBAChBjB,gBAAiBzB,EAAME,MAAMyC,yBCM5CC,EAfO,SAAC5C,GAGnB,OACI,yBAAKR,UAAWC,IAAMoD,eAClB,kBAAC,EAAD,CAAyB3C,MAAOF,EAAME,MACbgE,WAAYlE,EAAMkE,WAClB3B,kBAAmBvC,EAAMuC,kBACzBG,oBAAqB1C,EAAM0C,sBACpD,kBAAC,EAAD,CAA0BpB,iBAAkBtB,EAAMsB,iBACxBX,SAAUX,EAAME,MAAM4C,sB,wCCQ7CjC,GAnBgB,SAACb,GAG5B,OACI,yBAAKR,UAAWC,KAAMqB,aAClB,kBAAC,EAAD,CAAQF,MAAO,MACPF,QAASV,EAAMe,mBACfJ,SAAUX,EAAME,MAAMc,sBAE9B,kBAAC,EAAD,CAAQJ,MAAO,QACPF,QAASV,EAAMiB,MACfN,SAAUX,EAAME,MAAMiE,wB,oBCe3BpE,GA3BK,SAACC,GAEjB,IAAIC,EAAeR,KAAMa,YAEzB,cAAeN,EAAME,MAAMC,cACvB,IAAK,SACDF,GAA+BD,EAAME,MAAMC,eAAiBH,EAAME,MAAME,SAAY,IAAMX,KAAMY,eAAiB,GACjH,MACJ,IAAK,SACDJ,EAAeA,EAAe,IAAMR,KAAM2E,gBACT,qBAA7BpE,EAAME,MAAMC,eACZF,EAAeA,EAAc,IAAMR,KAAM4E,sBAQrD,OACI,yBAAK7E,UAAWC,KAAMc,oBAClB,0BAAMf,UAAWS,GAAeD,EAAME,MAAMC,gBCRzCgB,GAXK,SAACnB,GACjB,OACI,yBAAKR,UAAWC,KAAM2B,aAClB,kBAAC,GAAD,CAAalB,MAAOF,EAAME,QAC1B,kBAAC,GAAD,CAAwBA,MAAOF,EAAME,MACba,mBAAoBf,EAAMe,mBAC1BE,MAAOjB,EAAMiB,UCmIlCqD,G,4MAvIXtB,kBAAoB,WAChB,EAAKC,gB,EAGT/C,MAAQ,CACJuC,WAAY,EACZrC,SAAU,EACVD,aAAc,EACd2C,mBAAmB,EACnB9B,qBAAqB,EACrBmD,qBAAqB,EACrB3B,oBAAoB,EACpBG,sBAAsB,G,EAG1BQ,UAAY,WACR,IAAIC,EAAgBC,KAAKC,UAAU,EAAKpD,OACxCqD,aAAaC,QAAQ,wBAAyBJ,I,EAGlDH,aAAe,WACX,IAAI/C,EAAQ,EAAKA,MACbkD,EAAgBG,aAAaE,QAAQ,yBACrCL,IACAlD,EAAQmD,KAAKK,MAAMN,IAEvB,EAAKO,SAASzD,I,EAKlBe,MAAQ,WACJ,EAAK0C,SAAS,CACNxD,aAAc,EAAKD,MAAMuC,WACzBzB,qBAAqB,K,EAKjCD,mBAAqB,WACjB,IAAI6C,EAAkB,EAAK1D,MAAMC,aAAe,EAChD,EAAKwD,SAAS,CACVxD,aAAcyD,IAEd,EAAK1D,MAAMC,eAAiB,EAAKD,MAAME,SAAW,GAClD,EAAKuD,SAAS,CACV3C,qBAAqB,K,EAKjC0B,oBAAsB,SAACmB,GACnB,EAAKF,SAAS,CACVlB,WAAYoB,EACZ1D,aAAc,+BACd2C,mBAAmB,EACnB9B,qBAAqB,EACrBmD,qBAAqB,EACrBxB,sBAAsB,EACtBH,oBAAoB,IAEpBqB,EAAW,EACX,EAAKF,SAAS,CACVxD,aAAc,mBACd2C,mBAAmB,EACnB9B,qBAAqB,EACrBmD,qBAAqB,EACrBxB,sBAAsB,IAEnBkB,GAAY,EAAK3D,MAAME,UAC9B,EAAKuD,SAAS,CACVxD,aAAc,mBACdwC,sBAAsB,EACtBH,oBAAoB,EACpBM,mBAAmB,K,EAK/BP,kBAAoB,SAACsB,GACjB,EAAKF,SAAS,CACVvD,SAAUyD,EACV1D,aAAc,+BACd2C,mBAAmB,EACnB9B,qBAAqB,EACrBmD,qBAAqB,EACrB3B,oBAAoB,EACpBG,sBAAsB,IAEtBkB,EAAW,EACX,EAAKF,SAAS,CACVxD,aAAc,mBACd2C,mBAAmB,EACnB9B,qBAAqB,EACrBmD,qBAAqB,EACrB3B,oBAAoB,IAEjBqB,GAAY,EAAK3D,MAAMuC,YAC9B,EAAKkB,SAAS,CACVxD,aAAc,mBACdwC,sBAAsB,EACtBH,oBAAoB,EACpBM,mBAAmB,K,EAK/BxB,iBAAmB,WACf,EAAKqC,SAAS,CACVxD,aAAc,EAAKD,MAAMuC,WACzBK,mBAAmB,EACnB9B,qBAAqB,EACrBmD,qBAAqB,GACvB,EAAKhB,Y,EAIXW,OAAS,WAGL,OACI,yBAAKtE,UAAWC,IAAMsE,gBAClB,kBAAC,EAAD,CAAe7D,MAAO,EAAKA,MACZqC,kBAAmB,EAAKA,kBACxBG,oBAAqB,EAAKA,oBAC1BpB,iBAAkB,EAAKA,mBAEtC,kBAAC,GAAD,CAAapB,MAAO,EAAKA,MACZa,mBAAoB,EAAKA,mBACzBE,MAAO,EAAKA,U,YAnIlB+C,IAAMC,WCcdM,GAZH,WAER,OACI,yBAAK/E,UAAU,OACX,0BAAMA,UAAU,eAAhB,2BACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOgF,KAAK,YAAYV,OAAQ,kBAAM,kBAAC,GAAD,SACtC,kBAAC,IAAD,CAAOU,KAAK,YAAYV,OAAQ,kBAAM,kBAAC,EAAD,WCH9BW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAShB,OACL,kBAAC,IAAD,KACF,kBAAC,IAAMiB,WAAP,KACE,kBAAC,GAAD,QAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7D,GACL8D,QAAQ9D,MAAMA,EAAM+D,c","file":"static/js/main.fa61d7ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__3KdAm\",\"item\":\"Navbar_item__2qnf0\",\"active\":\"Navbar_active__11G_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputForSettings\":\"InputForSettings_inputForSettings__1_MNW\",\"inputTitle\":\"InputForSettings_inputTitle__2JTnk\",\"input\":\"InputForSettings_input__2BUpE\",\"error\":\"InputForSettings_error__1hQZb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputForSettings\":\"InputForSettings_inputForSettings__3z_gd\",\"inputTitle\":\"InputForSettings_inputTitle__1sNLk\",\"input\":\"InputForSettings_input__1VLw0\",\"error\":\"InputForSettings_error__1Rl8T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputValueWrapper\":\"OutputValue_outputValueWrapper__2vJGM\",\"outputValue\":\"OutputValue_outputValue__3WGNa\",\"outputValueMax\":\"OutputValue_outputValueMax__kr_Jm\",\"outputValueText\":\"OutputValue_outputValueText__3Fjfe\",\"outputValueTextError\":\"OutputValue_outputValueTextError__11yke\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"Counter1_counterWrapper__f08YQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputValueWrapper\":\"OutputValue_outputValueWrapper__rAGoJ\",\"outputValue\":\"OutputValue_outputValue__I1e2Z\",\"outputValueMax\":\"OutputValue_outputValueMax__1KZ9l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputBlock\":\"OutputBlock_outputBlock__JxmWC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsArea\":\"ButtonsAreaOutputBlock_buttonsArea__otwt-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__16jP0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsBlock\":\"SettingsBlock_settingsBlock__XN5FN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsArea\":\"ButtonsAreaSettingsBlock_buttonsArea__3S2rL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputsArea\":\"InputsAreaSettingsBlock_inputsArea__qZqN1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsBlock\":\"SettingsBlock_settingsBlock__3kr-7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsArea\":\"ButtonsAreaSettingsBlock_buttonsArea__3KErU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputsArea\":\"InputsAreaSettingsBlock_inputsArea__MXXOu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputBlock\":\"OutputBlock_outputBlock__MgkyQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsArea\":\"ButtonsAreaOutputBlock_buttonsArea__1gRRM\"};","import React from 'react';\nimport style from './Navbar.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nfunction Navbar() {\n  return (\n    <div className={style.navbar}>\n      <div className={style.item}>\n        <NavLink to='/counter1' activeClassName={style.active}>Counter 1</NavLink>\n      </div>\n      <div className={style.item}>\n        <NavLink to='/counter2' activeClassName={style.active}>Counter 2</NavLink>\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport style from './OutputValue.module.css';\n\n\nconst OutputValue = (props) => {\n\n    let counterClass = props.state.currentValue === props.state.maxValue ? style.outputValueMax : style.outputValue;\n\n    return (\n        <div className={style.outputValueWrapper}>\n            <span className={counterClass}>{props.state.currentValue}</span>\n        </div>\n\n    );\n}\n\nexport default OutputValue;\n","import React from 'react';\nimport style from './Button.module.css';\n\n\nconst Button = (props) => {\n\n   let onButtonClick =  () => {\n       props.onClick();\n   }\n\n    return (\n        <div>\n            <button className={style.button}\n                onClick={onButtonClick}\n                disabled={props.disabled}\n            >{props.title}</button>\n        </div>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport style from './ButtonsAreaOutputBlock.module.css';\nimport Button from \"../../../Button/Button\";\n\n\nconst ButtonsAreaOutputBlock = (props) => {\n\n\n    return (\n        <div className={style.buttonsArea}>\n            <Button title={'inc'}\n                    onClick={props.changeCounterValue}\n                    disabled={props.state.disabledCountButton}\n            />\n            <Button title={'reset'}\n                    onClick={props.reset}\n\n            />\n            <Button title={'set'}\n                onClick={props.showSettingsBlock}\n            />\n        </div>\n\n    );\n}\n\nexport default ButtonsAreaOutputBlock;\n","import React from 'react';\nimport style from './OutputBlock.module.css';\nimport OutputValue from \"./OutputValue/OutputValue\";\nimport ButtonsAreaOutputBlock from \"./ButtonsAreaOutputBlock/ButtonsAreaOutputBlock\";\n\n\n\nconst OutputBlock = (props) => {\n    return (\n        <div className={style.outputBlock}>\n            <OutputValue showSettingsBlock={props.showSettingsBlock}\n                         state={props.state}/>\n            <ButtonsAreaOutputBlock showSettingsBlock={props.showSettingsBlock}\n                                    reset={props.reset}\n                                    changeCounterValue={props.changeCounterValue}\n                                    state={props.state}\n            />\n        </div>\n    );\n}\n\nexport default OutputBlock;\n","import React from 'react';\nimport style from './ButtonsAreaSettingsBlock.module.css';\nimport Button from \"../../../Button/Button\";\n\n\nconst ButtonsAreaSettingsBlock = (props) => {\n    return (\n        <div className={style.buttonsArea}>\n            <Button title={'set'}\n                    onClick={props.onButtonSetClick}\n                    disabled={props.disabled}/>\n        </div>\n\n    );\n}\n\nexport default ButtonsAreaSettingsBlock;\n","import React from 'react';\nimport style from './InputForSettings.module.css';\n\n\nconst InputForSettings = (props) => {\n    let onValueChange = (e) => {\n        let value = Number(e.currentTarget.value);\n        props.onChange(value);\n    };\n    let classNameInput = props.inputErrorClass ? style.input + ' ' + style.error : style.input;\n\n    return (\n        <div className={style.inputForSettings}>\n            <span className={style.inputTitle}>{props.title}</span>\n            <input className={classNameInput} type='number' onChange={onValueChange} value={props.inputValue}/>\n        </div>\n\n    );\n}\n\nexport default InputForSettings;\n","import React from 'react';\nimport style from './InputsAreaSettingsBlock.module.css';\nimport InputForSettings from \"./InputForSettings/InputForSettings\";\n\n\nconst InputsAreaSettingsBlock = (props) => {\n\n    return (\n        <div className={style.inputsArea}>\n            <InputForSettings\n                title={'max value'}\n                inputValue={props.state.maxValue}\n                              onChange={props.updateNewMaxValue}\n                              inputErrorClass={props.state.inputMaxValueError}\n            />\n            <InputForSettings\n                title={'start value'}\n                inputValue={props.state.startValue}\n                              onChange={props.updateNewStartValue}\n                              inputErrorClass={props.state.inputStartValueError}\n            />\n        </div>\n\n    );\n}\n\nexport default InputsAreaSettingsBlock;\n","import React from 'react';\nimport style from './SettingsBlock.module.css';\nimport ButtonsAreaSettingsBlock from \"./ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock\";\nimport InputsAreaSettingsBlock from \"./InputsAreaSettingsBlock/InputsAreaSettingsBlock\";\n\n\nconst SettingsBlock = (props) => {\n\n\n    return (\n        <div className={style.settingsBlock}>\n            <InputsAreaSettingsBlock\n                state={props.state}\n                updateNewMaxValue={props.updateNewMaxValue}\n                updateNewStartValue={props.updateNewStartValue}\n            />\n            <ButtonsAreaSettingsBlock\n                onButtonSetClick={props.onButtonSetClick}\n                disabled={props.state.disabledSetButton}\n            />\n        </div>\n    );\n}\n\nexport default SettingsBlock;\n","import React from 'react';\nimport style from \"../Counter1/Counter1.module.css\";\nimport OutputBlock from \"./OutputBlock/OutputBlock\";\nimport SettingsBlock from \"./SettingsBlock/SettingsBlock\";\n\n\nclass Counter2 extends React.Component {\n\n    componentDidMount = () => {\n        this.restoreState()\n    };\n\n    state = {\n        currentValue: 0,\n        startValue: 0,\n        maxValue: 5,\n        disabledSetButton: true,\n        disabledCountButton: true,\n        inputMaxValueError: false,\n        inputStartValueError: false,\n        isHidden: false\n    };\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('startSettingsCounter2', stateAsString)\n    };\n\n    restoreState = () => {\n        let state = this.state;\n        let stateAsString = localStorage.getItem('startSettingsCounter2');\n        if (stateAsString) {\n            state = JSON.parse(stateAsString);\n        }\n        this.setState(state);\n    };\n\n\n    reset = () => {\n        this.setState({\n                currentValue: this.state.startValue,\n                disabledCountButton: false\n            }\n        )\n    };\n\n    changeCounterValue = () => {\n        let newCurrentValue = this.state.currentValue + 1;\n        this.setState({\n            currentValue: newCurrentValue\n        });\n        if (this.state.currentValue === this.state.maxValue - 1) {\n            this.setState({\n                disabledCountButton: true\n            });\n        }\n    };\n\n    updateNewStartValue = (newValue) => {\n        this.setState({\n            startValue: newValue,\n            disabledSetButton: false,\n            inputStartValueError: false,\n            inputMaxValueError: false,\n        });\n        if (newValue < 0) {\n            this.setState({\n                disabledSetButton: true,\n                inputStartValueError: true\n            });\n        } else if (newValue >= this.state.maxValue) {\n            this.setState({\n                inputStartValueError: true,\n                inputMaxValueError: true,\n                disabledSetButton: true,\n            });\n        }\n    };\n\n    updateNewMaxValue = (newValue) => {\n        this.setState({\n            maxValue: newValue,\n            disabledSetButton: false,\n            inputMaxValueError: false,\n            inputStartValueError: false,\n        });\n        if (newValue < 0) {\n            this.setState({\n                disabledSetButton: true,\n                inputMaxValueError: true\n            });\n        } else if (newValue <= this.state.startValue) {\n            this.setState({\n                inputStartValueError: true,\n                inputMaxValueError: true,\n                disabledSetButton: true,\n            });\n        }\n    };\n\n    onButtonSetClick = () => {\n        this.setState({\n            isHidden: false,\n            currentValue: this.state.startValue,\n            disabledCountButton: false\n        }, this.saveState);\n    };\n\n    showSettingsBlock = () => {\n        this.setState({\n            isHidden: true\n        }, this.saveState);\n    };\n\n\n    render = () => {\n\n        return (\n            <div className={style.counterWrapper}>\n                {!this.state.isHidden && <OutputBlock state={this.state}\n                                                      showSettingsBlock={this.showSettingsBlock}\n                                                      reset={this.reset}\n                                                      changeCounterValue={this.changeCounterValue}\n\n                />}\n                {this.state.isHidden && <SettingsBlock state={this.state}\n                                                       onButtonSetClick={this.onButtonSetClick}\n                                                       updateNewStartValue={this.updateNewStartValue}\n                                                       updateNewMaxValue={this.updateNewMaxValue}\n                />}\n            </div>\n        );\n    }\n}\n\nexport default Counter2;\n","import React from 'react';\nimport style from './ButtonsAreaSettingsBlock.module.css';\nimport Button from \"../../../Button/Button\";\n\n\nconst ButtonsAreaSettingsBlock = (props) => {\n    return (\n        <div className={style.buttonsArea}>\n            <Button title={'set'}\n                    onClick={props.onButtonSetClick}\n                    disabled={props.disabled}/>\n        </div>\n\n    );\n}\n\nexport default ButtonsAreaSettingsBlock;\n","import React from 'react';\nimport style from './InputForSettings.module.css';\n\n\nconst InputForSettings = (props) => {\n    let onValueChange = (e) => {\n        let value = Number(e.currentTarget.value);\n        props.onChange(value);\n    };\n    let classNameInput = props.inputErrorClass ? style.input + ' ' + style.error : style.input;\n\n    return (\n        <div className={style.inputForSettings}>\n            <span className={style.inputTitle}>{props.title}</span>\n            <input className={classNameInput} type='number' onChange={onValueChange} value={props.inputValue}/>\n        </div>\n\n    );\n}\n\nexport default InputForSettings;\n","import React from 'react';\nimport style from './InputsAreaSettingsBlock.module.css';\nimport InputForSettings from \"./InputForSettings/InputForSettings\";\n\n\nconst InputsAreaSettingsBlock = (props) => {\n\n    return (\n        <div className={style.inputsArea}>\n            <InputForSettings title={'max value'} inputValue={props.state.maxValue}\n                              onChange={props.updateNewMaxValue}\n                              inputErrorClass={props.state.inputMaxValueError}\n            />\n            <InputForSettings title={'start value'} inputValue={props.state.startValue}\n                              onChange={props.updateNewStartValue}\n                              inputErrorClass={props.state.inputStartValueError}\n            />\n        </div>\n\n    );\n}\n\nexport default InputsAreaSettingsBlock;\n","import React from 'react';\nimport style from './SettingsBlock.module.css';\nimport ButtonsAreaSettingsBlock from \"./ButtonsAreaSettingsBlock/ButtonsAreaSettingsBlock\";\nimport InputsAreaSettingsBlock from \"./InputsAreaSettingsBlock/InputsAreaSettingsBlock\";\n\n\nconst SettingsBlock = (props) => {\n\n\n    return (\n        <div className={style.settingsBlock}>\n            <InputsAreaSettingsBlock state={props.state}\n                                     classInput={props.classInput}\n                                     updateNewMaxValue={props.updateNewMaxValue}\n                                     updateNewStartValue={props.updateNewStartValue}/>\n            <ButtonsAreaSettingsBlock onButtonSetClick={props.onButtonSetClick}\n                                      disabled={props.state.disabledSetButton}/>\n        </div>\n    );\n}\n\nexport default SettingsBlock;\n","import React from 'react';\nimport style from './ButtonsAreaOutputBlock.module.css';\nimport Button from \"../../../Button/Button\";\n\n\nconst ButtonsAreaOutputBlock = (props) => {\n\n\n    return (\n        <div className={style.buttonsArea}>\n            <Button title={'inc'}\n                    onClick={props.changeCounterValue}\n                    disabled={props.state.disabledCountButton}\n            />\n            <Button title={'reset'}\n                    onClick={props.reset}\n                    disabled={props.state.disabledResetButton}\n\n            />\n        </div>\n\n    );\n}\n\nexport default ButtonsAreaOutputBlock;\n","import React from 'react';\nimport style from './OutputValue.module.css';\n\n\nconst OutputValue = (props) => {\n\n    let counterClass = style.outputValue;\n\n    switch (typeof(props.state.currentValue)) {\n        case 'number':\n            counterClass = counterClass + (props.state.currentValue === props.state.maxValue ?  ' ' + style.outputValueMax : '');\n            break;\n        case \"string\":\n            counterClass = counterClass + ' ' + style.outputValueText;\n            if (props.state.currentValue === \"Incorrect value!\"){\n                counterClass = counterClass +' ' + style.outputValueTextError\n            }\n            break;\n        default:\n            break\n    }\n\n\n    return (\n        <div className={style.outputValueWrapper}>\n            <span className={counterClass}>{props.state.currentValue}</span>\n        </div>\n\n    );\n}\n\nexport default OutputValue;\n","import React from 'react';\nimport style from './OutputBlock.module.css';\nimport ButtonsAreaOutputBlock from \"./ButtonsAreaOutputBlock/ButtonsAreaOutputBlock\";\nimport OutputValue from \"./OutputValue/OutputValue\";\n\n\nconst OutputBlock = (props) => {\n    return (\n        <div className={style.outputBlock}>\n            <OutputValue state={props.state}/>\n            <ButtonsAreaOutputBlock state={props.state}\n                                    changeCounterValue={props.changeCounterValue}\n                                    reset={props.reset}/>\n        </div>\n    );\n}\n\nexport default OutputBlock;\n","import React from 'react';\nimport style from './Counter1.module.css';\nimport SettingsBlock from \"./SettingsBlock/SettingsBlock\";\nimport OutputBlock from \"./OutputBlock/OutputBlock\";\n\n\nclass Counter1 extends React.Component {\n\n    componentDidMount = () => {\n        this.restoreState()\n    };\n\n    state = {\n        startValue: 0,\n        maxValue: 5,\n        currentValue: 0,\n        disabledSetButton: true,\n        disabledCountButton: false,\n        disabledResetButton: false,\n        inputMaxValueError: false,\n        inputStartValueError: false,\n    };\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('startSettingsCounter1', stateAsString)\n    };\n\n    restoreState = () => {\n        let state = this.state;\n        let stateAsString = localStorage.getItem('startSettingsCounter1');\n        if (stateAsString) {\n            state = JSON.parse(stateAsString);\n        }\n        this.setState(state);\n    };\n\n\n\n    reset = () => {\n        this.setState({\n                currentValue: this.state.startValue,\n                disabledCountButton: false\n            }\n        )\n    };\n\n    changeCounterValue = () => {\n        let newCurrentValue = this.state.currentValue + 1;\n        this.setState({\n            currentValue: newCurrentValue\n        });\n        if (this.state.currentValue === this.state.maxValue - 1) {\n            this.setState({\n                disabledCountButton: true\n            });\n        }\n    };\n\n    updateNewStartValue = (newValue) => {\n        this.setState({\n            startValue: newValue,\n            currentValue: \"enter values and press 'set'\",\n            disabledSetButton: false,\n            disabledCountButton: true,\n            disabledResetButton: true,\n            inputStartValueError: false,\n            inputMaxValueError: false,\n        });\n        if (newValue < 0) {\n            this.setState({\n                currentValue: \"Incorrect value!\",\n                disabledSetButton: true,\n                disabledCountButton: true,\n                disabledResetButton: true,\n                inputStartValueError: true\n            });\n        } else if (newValue >= this.state.maxValue) {\n            this.setState({\n                currentValue: \"Incorrect value!\",\n                inputStartValueError: true,\n                inputMaxValueError: true,\n                disabledSetButton: true,\n            });\n        }\n    };\n\n    updateNewMaxValue = (newValue) => {\n        this.setState({\n            maxValue: newValue,\n            currentValue: \"enter values and press 'set'\",\n            disabledSetButton: false,\n            disabledCountButton: true,\n            disabledResetButton: true,\n            inputMaxValueError: false,\n            inputStartValueError: false,\n        });\n        if (newValue < 0) {\n            this.setState({\n                currentValue: \"Incorrect value!\",\n                disabledSetButton: true,\n                disabledCountButton: true,\n                disabledResetButton: true,\n                inputMaxValueError: true\n            });\n        } else if (newValue <= this.state.startValue) {\n            this.setState({\n                currentValue: \"Incorrect value!\",\n                inputStartValueError: true,\n                inputMaxValueError: true,\n                disabledSetButton: true,\n            });\n        }\n    };\n\n    onButtonSetClick = () => {\n        this.setState({\n            currentValue: this.state.startValue,\n            disabledSetButton: true,\n            disabledCountButton: false,\n            disabledResetButton: false,\n        },this.saveState);\n    };\n\n\n    render = () => {\n\n\n        return (\n            <div className={style.counterWrapper}>\n                <SettingsBlock state={this.state}\n                               updateNewMaxValue={this.updateNewMaxValue}\n                               updateNewStartValue={this.updateNewStartValue}\n                               onButtonSetClick={this.onButtonSetClick}\n                />\n                <OutputBlock state={this.state}\n                             changeCounterValue={this.changeCounterValue}\n                             reset={this.reset}/>\n            </div>\n        );\n    }\n}\n\nexport default Counter1;\n","import React from 'react';\nimport './App.css';\nimport Navbar from \"./Navbar/Navbar\";\nimport {Route} from \"react-router-dom\";\nimport Counter2 from \"./Counter2/Counter2\";\nimport Counter1 from \"./Counter1/Counter1\";\n\n\nconst App = () => {\n\n    return (\n        <div className=\"App\">\n            <span className='installText'>Select counter version </span>\n            <Navbar/>\n            <Route path='/counter1' render={() => <Counter1/>}/>\n            <Route path='/counter2' render={() => <Counter2/>}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n    </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}